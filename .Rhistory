install.packages("tidyverse")
install.packages("jsonlite")
setwd("C:/Users/CLB43/R_Analysis")
setwd("C:/Users/CLB43/R_Analysis")
> install.packages("tidyverse")
install.packages("tidyverse")
install.packages("jsonlite")
setwd("C:/Users/CLB43/R_Analysis/01_Demo")
# Add boxplot and rotate x-axis labels 45 degrees
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1))
# Make a list of numbers from 0 to 9
numlist <- c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
# Use fromJSON() to read in the used car data
demo_table2 <- fromJSON(txt='demo.json')
# 15.2.3 Read and Write Using R
# Look up documentation on read.csv()
?read.csv()
# Use read.csv to read in the demo file to the R environment
demo_table <- read.csv(file='demo.csv',check.names=F,stringsAsFactors = F)
# Look up the documentation on the fromJSON() library
?fromJSON()
View(demo_table)
# 15.2.1 Fundamentals of R Programming
# Create a named value x and assign it a value of 3
x <- 3
# Make a list of numbers from 0 to 9
numlist <- c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
# 15.2.3 Read and Write Using R
# Look up documentation on read.csv()
?read.csv()
# Look up the documentation on the fromJSON() library
?fromJSON()
# Look up the documentation on the fromJSON() library
library(jsonlite)
# Look up the documentation on the fromJSON() library
library(jsonlite)
?fromJSON()
# Use fromJSON() to read in the used car data
demo_table2 <- fromJSON(txt='demo.json')
View(demo_table2)
# 15.2.4 Select Data in R
# To select the third value in a numeric vector x with 10 values
x <- c(3, 3, 2, 2, 5, 5, 8, 8, 9)
x[3]
# Select the third row of the Year column using bracket notation
demo_table[3,"Year"]
# Alternate method
demo_table[3,3]
# Select the vector of vehicle classes from demo_table
demo_table$"Vehicle_Class"
# Use bracket notation to select a single value
demo_table$"Vehicle_Class"[2]
# Filter the demo_table2 to show only rows where vehicle price is greater than $10k
filter_table <- demo_table2[demo_table2$price 10000,]
View(demo_table2)
# Look up the documentation for subset()
?subset()
# Create a filtered dataset using demo_table2 where price > 10000, drive == 4wd, and "clean" %in% title_status
# Filter by price and drivetrain
filter_table2 <- subset(demo_table2, price > 10000 & drive == "4wd" & "clean" %in% title_status)
View(filter_table2)
# Create the same table more simply with subset()
filter_table3 <- demo_table2[("clean" %in% demo_table2$title_status) & (demo_table2$price > 10000) & (demo_table2$drive == "4wd"),]
# Look up the documentation for sample()
?sample()
# Sample a large vector and create a smaller vector
sample(c("cow", "deer", "pig", "chicken", "duck", "sheep", "dog"), 4)
# Capture the number of rows in demo_table in a variable
num_rows <- 1:nrow(demo_table)
# Sample 3 of those rows
sample_rows <- sample(num_rows, 3)
# Retrieve requested data within the demo_table
demo_table[sample_rows,]
# Combine the previous 3 steps into one
demo_table[sample(1:nrow(demo_table), 3),]
# 15.2.5 Transform, Group, and Reshape Data Using the Tidyverse Package
# Examine the mutate() documentation
library(tidyverse)
?mutate()
# Add a column for the mileage per year in demo_table and label all vehicles as active
demo_table <- demo_table %>% mutate(Mileage_per_Year=Total_Miles/(2020-Year),IsActive=TRUE) # Add columns to original data frame
# Add the max price for each condition
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer),Maximum_Price=max(price),Num_Vehicles=n(), .groups = 'keep') # Create summary table with multiple columns
# Examine the gather() documentation
?gather()
# Load the demo2.csv data
demo_table3 <- read.csv('demo2.csv',check.names = F,stringsAsFactors = F)
# Use gather() to change to long format
long_table <- gather(demo_table3,key="Metric",value="Score",buying_price:popularity)
# Alternate method
long_table <- demo_table3 %>% gather(key="Metric",value="Score",buying_price:popularity)
# Examine the spread() documentation
?spread()
# Return dataframe to original format using spread()
wide_table <- long_table %>% spread(key="Metric",value="Score")
# 15.3.1 Introduction to ggplot2
# Examine the ggplot() documentation
?ggplot()
# 15.3.2 Build a Bar Plot in ggplot2
# Create a bar plot to show distribution of vehicle classes from the mpg dataset:
# Import dataset into ggplot2
plt <- ggplot(mpg,aes(x=class))
# Plot a bar plot
plt + geom_bar()
# Examine the geom_bar() documentation
?geom_bar()
# Compare the number of vehicles from each manufacturer in the dataset:
# Create summary table
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(), .groups = 'keep')
# Import dataset into ggplot2
plt <- ggplot(mpg_summary,aes(x=manufacturer,y=Vehicle_Count))
# Plot a bar plot
plt + geom_col()
# 15.3.3 Add Formatting Functions
# Format the bar plot with labels
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset")
# Plot a boxplot with labels and rotate the x-axis label 45 degrees
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") +
theme(axis.text.x=element_text(angle=45,hjust=1))
# 15.3.4 Build a Line Plot in ggplot2
# Compare Toyota's average highway fuel economy as a function of the different cylinder sizes:
# Create summary table
mpg_summary <- subset(mpg,manufacturer=="toyota") %>% group_by(cyl) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep')
# Import dataset into ggplot2
plt <- ggplot(mpg_summary,aes(x=cyl,y=Mean_Hwy))
# Generate the line plot
plt + geom_line()
# Adjust the x-axis and y-axis tick values
plt + geom_line() + scale_x_discrete(limits=c(4,6,8)) + scale_y_continuous(breaks = c(15:30))
# Create scatter plot to show size of engine versus city fuel efficiency:
# Import dataset into ggplot2
plt <- ggplot(mpg,aes(x=displ,y=cty))
# Add scatter plot with labels
plt + geom_point() + xlab("Engine Size (L)") + ylab("City Fuel-Efficiency (MPG)")
# 15.3.5 Create Advanced Boxplots in ggplot2
# Create the same plot while grouping variables of interest:
# Import dataset into ggplot2
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class))
# Add scatter plot with labels
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class")
# Create while adding more information:
# Import dataset into ggplot2
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class,shape=drv))
# Add scatter plot with multiple aesthetics
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class",shape="Type of Drive")
# 15.3.5 Create Advanced Boxplots in ggplot2
# Generate boxplot to visualize the fuel efficiency for mpg dataset:
# Import dataset into ggplot2
plt <- ggplot(mpg,aes(y=hwy))
# Add boxplot
plt + geom_boxplot()
# Generate set of boxplots to compare fuel efficiency for each manufacturer:
# Import dataset into ggplot2
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy))
# Add boxplot and rotate x-axis labels 45 degrees
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1))
# Visualize average highway fuel efficiency across vehicle class from 1999 to 2008:
# Create summary table
mpg_summary <- mpg %>% group_by(class,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep')
plt <- ggplot(mpg_summary, aes(x=class,y=factor(year),fill=Mean_Hwy))
# Create heatmap with labels
plt + geom_tile() + labs(x="Vehicle Class",y="Vehicle Year",fill="Mean Highway (MPG)")
# Visualize difference in fuel efficiency across vehicle models from 1999 to 2008:
# Create summary table
mpg_summary <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep')
# Import dataset into ggplot2
plt <- ggplot(mpg_summary, aes(x=model,y=factor(year),fill=Mean_Hwy))
# Add heatmap with labels and rotate x-axis labels 90 degrees
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") +
theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5))
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() + #add boxplot
plt + geom_boxplot() + #add boxplot
theme(axis.text.x=element_text(angle=45,hjust=1)) + #rotate x-axis labels 45 degrees
plt + geom_boxplot() + #add boxplot
theme(axis.text.x=element_text(angle=45,hjust=1)) + #rotate x-axis labels 45 degrees
plt + geom_boxplot() + #add boxplot
theme(axis.text.x=element_text(angle=45,hjust=1)) + #rotate x-axis labels 45 degrees
plt + geom_boxplot() + #add boxplot
theme(axis.text.x=element_text(angle=45,hjust=1)) + #rotate x-axis labels 45 degrees
geom_point() #overlay scatter plot on top
plt + geom_boxplot() + #add boxplot
theme(axis.text.x=element_text(angle=45,hjust=1)) + #rotate x-axis labels 45 degrees
geom_point() #overlay scatter plot on top
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=class,y=Mean_Engine)) #import dataset into ggplot2
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size") #add scatter plot
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ),SD_Engine=sd(displ), .groups = 'keep')
plt <- ggplot(mpg_summary,aes(x=class,y=Mean_Engine)) #import dataset into ggplot2
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size") + #add scatter plot with labels
geom_errorbar(aes(ymin=Mean_Engine-SD_Engine,ymax=Mean_Engine+SD_Engine)) #overlay with error bars
mpg_long <- mpg %>% gather(key="MPG_Type",value="Rating",c(cty,hwy)) #convert to long format
head(mpg_long)
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type)) #import dataset into ggplot2
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1)) #add boxplot with labels rotated 45 degrees
?facet_wrap()
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type)) #import dataset into ggplot2
plt + geom_boxplot() + facet_wrap(vars(MPG_Type)) + #create multiple boxplots, one for each MPG type
theme(axis.text.x=element_text(angle=45,hjust=1),legend.position = "none") + xlab("Manufacturer") #rotate x-axis labels
ggplot(mtcars,aes(x=wt)) + geom_density() #visualize distribution using density plot
shapiro.test(mtcars$wt)
population_table <- read.csv('used_car_data.csv',check.names = F,stringsAsFactors = F) #import used car dataset
population_table <- read.csv('used_car_data.csv',check.names = F,stringsAsFactors = F) #import used car dataset
plt <- ggplot(population_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
sample_table <- population_table %>% sample_n(50) #randomly sample 50 data points
plt <- ggplot(sample_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
?t.test()
t.test(log10(sample_table$Miles_Driven),mu=mean(log10(population_table$Miles_Driven))) #compare sample versus population means
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven)) #compare means of two samples
mpg_data <- read.csv('mpg_modified.csv') #import dataset
mpg_1999 <- mpg_data %>% filter(year==1999) #select only data points where the year is 1999
mpg_2008 <- mpg_data %>% filter(year==2008) #select only data points where the year is 2008
t.test(mpg_1999$hwy,mpg_2008$hwy,paired = T) #compare the mean difference between two samples
t.test(mpg_1999$hwy,mpg_2008$hwy,paired = T) #compare the mean difference between two samples
?aov()
mtcars_filt <- mtcars[,c("hp","cyl")] #filter columns from mtcars dataset
mtcars_filt$cyl <- factor(mtcars_filt$cyl) #convert numeric column to factor
aov(hp ~ cyl,data=mtcars_filt) #compare means across multiple levels
summary(aov(hp ~ cyl,data=mtcars_filt))
?cor()
head(mtcars)
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt + geom_point() #create scatter plot
cor(mtcars$hp,mtcars$qsec) #calculate correlation coefficient
used_cars <- read.csv('used_car_data.csv',stringsAsFactors = F) #read in dataset
head(used_cars)
plt <- ggplot(used_cars,aes(x=Miles_Driven,y=Selling_Price)) #import dataset into ggplot2
plt + geom_point() #create a scatter plot
cor(used_cars$Miles_Driven,used_cars$Selling_Price) #calculate correlation coefficient
used_matrix <- as.matrix(used_cars[,c("Selling_Price","Present_Price","Miles_Driven")]) #convert data frame into numeric matrix
cor(used_matrix)
?lm()
lm(qsec ~ hp,mtcars) #create linear model
summary(lm(qsec~hp,mtcars)) #summarize linear model
lm(qsec ~ hp,mtcars) #create linear model
summary(lm(qsec~hp,mtcars)) #summarize linear model
model <- lm(qsec ~ hp,mtcars) #create linear model
yvals <- model$coefficients['hp']*mtcars$hp +
model$coefficients['(Intercept)'] #determine y-axis values from linear model
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars) #generate multiple linear regression model
summary(lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars)) #generate summary statistics
?chisq.test()
table(mpg$class,mpg$year) #generate contingency table
tbl <- table(mpg$class,mpg$year) #generate contingency table
chisq.test(tbl) #compare categorical distributions
library(dplyr)
MechaCar_mpg <- read.csv(file='MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
library(tidyverse)
MechaCar_mpg <- read.csv(file='./Resources/MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
MechaCar_mpg <- read.csv(file='./MechaCar_Statistical_Analysis/MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
MechaCar_mpg <- read.csv(file='./MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
MechaCar_mpg <- read.csv(file='MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
MechaCar_mpg <- read.csv(file='MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
?read.csv
setwd("C:/Users/CLB43/MechaCar_Statistical_Analysis")
MechaCar_mpg <- read.csv(file='MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
#5 linear regression
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=mecha_mpg)
#5 linear regression
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=MechaCar_mpg)
#6 Determine p-value and r-squared value
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=MechaCar_mpg))
# Eliminate independent variables with little impact on mpg:
lm(mpg ~ vehicle_length + ground_clearance, data=MechaCar_mpg)
summary(lm(mpg ~ vehicle_length + ground_clearance, data=MechaCar_mpg))
## Deliverable 2
#2 import and read csv file
mecha_coil <- read.csv(file='Suspension_Coil.csv',check.names=F,stringsAsFactors = F)
#3 Create total summary dataframe to get mean, median, variance and sd
total_summary <- mecha_coil %>% summarize(Mean_PSI=mean(PSI),
Median_PSI=median(PSI),
Var_PSI=var(PSI),
Std_Dev_PSI=sd(PSI),
Num_Coil=n(), .groups = 'keep')
#4 Create lot summary dataframe using group_by and summarize
lot_summary <- mecha_coil  %>% group_by(Manufacturing_Lot) %>% summarize(Mean_PSI=mean(PSI),
Median_PSI=median(PSI),
Var_PSI=var(PSI),
Std_Dev_PSI=sd(PSI),
Num_Coil=n(), .groups = 'keep')
View(total_summary)
View(lot_summary)
## Deliverable 3
#1. use t.test to determine if PSI is statistically different from the pop mean
t.test(mecha_coil$PSI,mu=1500)
#2 use t.test function with subset to determine if PSI for each manufacturing lot is statistically different.
lot1 <- subset(mecha_coil, Manufacturing_Lot=="Lot1")
lot2 <- subset(mecha_coil, Manufacturing_Lot=="Lot2")
lot3 <- subset(mecha_coil, Manufacturing_Lot=="Lot3")
t.test(lot1$PSI,mu=1500)
t.test(lot2$PSI,mu=1500)
t.test(lot3$PSI,mu=1500)
